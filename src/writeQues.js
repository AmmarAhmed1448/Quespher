// Import the functions you need from the SDKs you need
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
// import { getAnalytics } from "firebase/analytics";
import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
import { getDatabase, ref, push, set, child } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-database.js';


// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCitYPwal0hut1_V__4VvTPcefOEbG3unI",
  authDomain: "quespher.firebaseapp.com",
  projectId: "quespher",
  databaseURL: "https://quespher-default-rtdb.europe-west1.firebasedatabase.app/",
  storageBucket: "quespher.appspot.com",
  messagingSenderId: "635807394056",
  appId: "1:635807394056:web:85cf045a92dab33d8624bd",
  measurementId: "G-TGBB3V6JJ8"
};



// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
// const analytics = getAnalytics(app);
const database = getDatabase(app);
let delta2;



//* ************************************************************************

//? Quill Code

function quillInitialization(){

const toolbarOptions = [
  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
  ['blockquote', 'code-block'],

  // [{ 'header': 1 }, { 'header': 2 }],               // custom button values
  [{ 'list': 'ordered' }, { 'list': 'bullet' }],
  [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
  [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
  // [{ 'direction': 'rtl' }],                         // text direction

  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

  // [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
  // [{ 'font': [] }],
  // [{ 'align': [] }],

  // ['clean']                                         // remove formatting button
];

const quill = new Quill('#editor', {
  modules: {
    toolbar: '#toolbar',
    toolbar: toolbarOptions
  },
  readOnly: false,
  theme: 'snow'
});





quill.on('text-change', function (delta, oldDelta, source) {
  // Log the Delta object representing the content of the Quill editor
  // console.log('Delta:', delta);
  //     console.log('Old Delta:', oldDelta);
  //     console.log('Source:', source);

  delta2 = quill.getContents();
  console.log(delta2)
  // editor.setContents(delta2);

});
}

function upload(user){
  
  const uploadContentBtn = document.getElementById('uploadContent')
  uploadContentBtn.addEventListener('click', () => {

    const title = document.getElementById('title').value;
    const category = document.getElementById('category').value;
    const type = document.querySelector('input[name="type"]:checked').value;
    const status = document.querySelector('input[name="status"]:checked').value;

    // Get a reference to the desired location in the database
    const blogRef = ref(database)

    // Generate a unique key using push()
    const newBlogRef = push(child(blogRef, 'blog'));

    // Get the unique ID generated by push()
    const newBlogId = newBlogRef.key;

    console.log("Unique ID:", newBlogId);         // !!!!!!

    // delta2 = JSON.stringify(delta2);
    // Create the blog data to be stored in the database
    const blogData = {
      blogData: {
        uid: user.uid,
        authorName: user.displayName,
        title: title,
        category: category,
        type: type,
        status: status,
        delta: delta2,
        date: new Date().toISOString()
      }
    }

    // Write the blog data to the database
    set(newBlogRef, blogData)
      .then(() => {
        console.log("Blog data written successfully.");
      })
      .catch((error) => {
        console.error("Error writing blog data:", error);
      });
  });


}

const deltaBtn = document.getElementById('deltaBtn');
const abc = document.getElementById('abc');

deltaBtn.addEventListener('click', () => {
  const options = {
    // debug: 'info',
    modules: {
      toolbar: ''
    },
    // placeholder: 'Compose an epic...',
    readOnly: true,
    theme: 'snow'
  };
  const editor = new Quill('#quill-container', options);
  

  editor.setContents(oJSON);
abc.innerHTML = delta2;

})

const logOut = document.getElementById('logout')

logOut.addEventListener('click', () => {
  signOut(auth).then(() => {
    console.log("signed out")
  }).catch((error) => {
    console.log("An error occurred while signing out");
    // An error happened.
  });
})



onAuthStateChanged(auth, (user) => {
  if (user) {
    quillInitialization();
    upload(user)

  } else {

    console.log("User is signed out");        //!!!!!!!
    window.location.href = "signin.html"; // Redirect to your sign-in page
  }
  
});

